import logging
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, 
    ContextTypes, 
    CommandHandler, 
    MessageHandler, 
    filters
)
from pathlib import Path

from config import Config
from file_processor import FileProcessor
from gigachat_client import GigaChatClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class OfficeAssistantBot:
    def __init__(self):
        self.config = Config()
        self.file_processor = FileProcessor()
        self.gigachat_client = GigaChatClient()
        self.application = None
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
üëã –ü—Ä–∏–≤–µ—Ç! –Ø - –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ –¶–∏—Ñ—Ä–æ–≤—ã–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤!

ü§ñ –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ Microsoft Office:
‚Ä¢ Word, Excel, PowerPoint
‚Ä¢ –§–æ—Ä–º—É–ª—ã, –º–∞–∫—Ä–æ—Å—ã, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤–µ—Ä—Å–∏–π
‚Ä¢ –ü–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏

üìé –ú–æ–∂–µ—à—å –ø—Ä–∏—Å—ã–ª–∞—Ç—å –º–Ω–µ:
‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º
‚Ä¢ PDF, DOCX, XLSX —Ñ–∞–π–ª—ã

–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏ —Ñ–∞–π–ª! üöÄ
        """
        await update.message.reply_text(welcome_text)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞

üìã –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:
‚Ä¢ "–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ –≤ Word?"
‚Ä¢ "–ü–æ—á–µ–º—É –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è XLOOKUP?"
‚Ä¢ "–ö–∞–∫ –ø–æ—Å—á–∏—Ç–∞—Ç—å —Å—É–º–º—É –≤ —Å—Ç–æ–ª–±—Ü–µ Excel?"

üñºÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã:
‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPG, PNG) - —Ä–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç
‚Ä¢ PDF, DOCX, XLSX - –∏–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        """
        await update.message.reply_text(help_text)
    
    async def clear_history(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞"""
        self.gigachat_client.clear_history()
        await update.message.reply_text("üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞!")
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_message = update.message.text
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await update.message.reply_chat_action("typing")
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GigaChat
            response = self.gigachat_client.send_message(user_message)
            await update.message.reply_text(response)
            
        except Exception as e:
            logger.error(f"Text processing error: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        photo = update.message.photo[-1]
        file = await context.bot.get_file(photo.file_id)
        local_path = Path(Config.DOWNLOAD_DIR) / f"photo_{photo.file_id}.jpg"
        
        try:
            await update.message.reply_text("üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            await file.download_to_drive(custom_path=str(local_path))
            
            # OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞
            extracted_text = self.file_processor.process_image(local_path)
            user_question = update.message.caption or "–ß—Ç–æ –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏?"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GigaChat
            response = self.gigachat_client.send_message(
                user_question, 
                extracted_text, 
                "image"
            )
            await update.message.reply_text(response)
            
        except Exception as e:
            logger.exception('Photo processing failed')
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if local_path.exists():
                local_path.unlink()
    
    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        doc = update.message.document
        file = await context.bot.get_file(doc.file_id)
        local_path = Path(Config.DOWNLOAD_DIR) / f"{doc.file_id}_{doc.file_name}"
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            if doc.file_size and doc.file_size > Config.MAX_FILE_SIZE:
                await update.message.reply_text("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20MB")
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
            file_type = self.file_processor.get_file_type(doc.file_name, doc.mime_type)
            
            if file_type == 'unknown':
                await update.message.reply_text("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF, DOCX, XLSX —Ñ–∞–π–ª—ã –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                return
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            await file.download_to_drive(custom_path=str(local_path))
            await update.message.reply_text(f"üìé –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {file_type.upper()} —Ñ–∞–π–ª...")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
            extracted_text = ""
            if file_type == 'pdf':
                extracted_text = self.file_processor.process_pdf(local_path)
            elif file_type == 'docx':
                extracted_text = self.file_processor.process_docx(local_path)
            elif file_type == 'xlsx':
                extracted_text = self.file_processor.process_xlsx(local_path)
            
            # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            if len(extracted_text) > Config.MAX_TEXT_LENGTH:
                extracted_text = extracted_text[:Config.MAX_TEXT_LENGTH] + "\n\n... (—Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω)"
            
            user_question = update.message.caption or f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç {file_type} —Ñ–∞–π–ª"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GigaChat
            response = self.gigachat_client.send_message(
                user_question, 
                extracted_text, 
                file_type
            )
            await update.message.reply_text(response)
            
        except Exception as e:
            logger.exception('Document processing failed')
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if local_path.exists():
                local_path.unlink()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("clear", self.clear_history))
        self.application.add_handler(MessageHandler(filters.PHOTO, self.handle_photo))
        self.application.add_handler(MessageHandler(filters.Document.ALL, self.handle_document))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            Config.validate()
            
            self.application = ApplicationBuilder().token(Config.TELEGRAM_TOKEN).build()
            self.setup_handlers()
            
            logger.info('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
            self.application.run_polling()
            
        except Exception as e:
            logger.error(f"Failed to start bot: {e}")
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

def main():
    bot = OfficeAssistantBot()
    bot.run()

if __name__ == '__main__':
    main()
