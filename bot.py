# bot.py

import os
import logging
import requests
from io import BytesIO
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv
from PIL import Image
import pytesseract
from pdf2image import convert_from_bytes
from prompts import MICROSOFT_OFFICE_PROMPT

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GIGA_CHAT_TOKEN = os.getenv("GIGA_CHAT_TOKEN")

if not TELEGRAM_BOT_TOKEN or not GIGA_CHAT_TOKEN:
    raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç TELEGRAM_BOT_TOKEN –∏–ª–∏ GIGA_CHAT_TOKEN –≤ .env")

GIGACHAT_API_URL = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
IMAGE_EXTENSIONS = {'.jpg', '.jpeg', '.png', '.bmp', '.tiff', '.webp'}
PDF_EXTENSION = '.pdf'

def extract_text_from_image_pil(image: Image.Image) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –æ–±—ä–µ–∫—Ç–∞ PIL Image."""
    try:
        return pytesseract.image_to_string(image, lang='rus+eng').strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ OCR: {e}")
        return ""

def extract_text_from_document(file_bytes: bytes, filename: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ PDF)."""
    ext = os.path.splitext(filename.lower())[1]

    if ext in IMAGE_EXTENSIONS:
        try:
            image = Image.open(BytesIO(file_bytes))
            if image.mode != 'RGB':
                image = image.convert('RGB')
            return extract_text_from_image_pil(image)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {filename}: {e}")
            return ""

    elif ext == PDF_EXTENSION:
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            images = convert_from_bytes(file_bytes, first_page=1, last_page=1, fmt='jpeg')
            if not images:
                return ""
            return extract_text_from_image_pil(images[0])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF {filename}: {e}")
            return ""

    else:
        return ""  # –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç

def ask_gigachat(user_input: str) -> str:
    prompt = MICROSOFT_OFFICE_PROMPT.format(user_input=user_input)
    headers = {
        "Authorization": f"Bearer {GIGA_CHAT_TOKEN}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": "GigaChat",
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.7,
        "max_tokens": 1000
    }

    try:
        response = requests.post(
            GIGACHAT_API_URL,
            json=payload,
            headers=headers,
            verify=False,
            timeout=30
        )
        response.raise_for_status()
        return response.json()["choices"][0]["message"]["content"].strip()
    except Exception as e:
        logger.error(f"GigaChat –æ—à–∏–±–∫–∞: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üìé\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å:\n"
        "‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ Microsoft Office\n"
        "‚Ä¢ –§–æ—Ç–æ (—Å–∫—Ä–∏–Ω—à–æ—Ç)\n"
        "‚Ä¢ –§–∞–π–ª-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (JPG, PNG –∏ –¥—Ä.)\n"
        "‚Ä¢ PDF (–æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)\n"
        "–Ø –ø–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è!"
    )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    logger.info(f"–¢–µ–∫—Å—Ç: {text}")
    answer = ask_gigachat(text)
    await update.message.reply_text(answer)

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üì∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ...")
    try:
        photo = update.message.photo[-1]
        file = await context.bot.get_file(photo.file_id)
        file_bytes = await file.download_as_bytearray()
        image = Image.open(BytesIO(file_bytes))
        if image.mode != 'RGB':
            image = image.convert('RGB')
        extracted_text = extract_text_from_image_pil(image)
        if not extracted_text:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—ë—Ç–∫–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç.")
            return
        logger.info(f"OCR –∏–∑ —Ñ–æ—Ç–æ: {extracted_text}")
        answer = ask_gigachat(extracted_text)
        await update.message.reply_text(
            f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:\n```\n{extracted_text[:300]}{'...' if len(extracted_text) > 300 else ''}\n```\n\n–û—Ç–≤–µ—Ç:\n{answer}",
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    document = update.message.document
    file_name = document.file_name or "unknown"
    mime_type = document.mime_type or ""

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ PDF
    ext = os.path.splitext(file_name.lower())[1]
    if ext not in IMAGE_EXTENSIONS and ext != PDF_EXTENSION:
        await update.message.reply_text("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPG, PNG –∏ –¥—Ä.) –∏ PDF-—Ñ–∞–π–ª—ã.")
        return

    await update.message.reply_text(f"üìé –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: {file_name}...")

    try:
        file = await context.bot.get_file(document.file_id)
        file_bytes = await file.download_as_bytearray()
        extracted_text = extract_text_from_document(bytes(file_bytes), file_name)

        if not extracted_text:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç.")
            return

        logger.info(f"OCR –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {file_name}: {extracted_text}")
        answer = ask_gigachat(extracted_text)
        await update.message.reply_text(
            f"–§–∞–π–ª: `{file_name}`\n–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:\n```\n{extracted_text[:300]}{'...' if len(extracted_text) > 300 else ''}\n```\n\n–û—Ç–≤–µ—Ç:\n{answer}",
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {file_name}: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", exc_info=context.error)

# –ó–∞–ø—É—Å–∫
def main():
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    application.add_error_handler(error_handler)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–æ—Ç–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è PDF)!")
    application.run_polling()

if __name__ == "__main__":
    main()